# File: build.ninja
# SPDX-License-Identifier: MIT
# Purpose: Build the project

rule kernel_cc
  command = clang -DARCH_ARM64 -I. -Iinclude -O2 -std=c23 -target aarch64-none-elf -ffreestanding -nostdlib -Wall -Wextra -c $in -o $out
  description = CC KERNEL $out

rule kernel_asm
  command = clang -DARCH_ARM64 -I. -Iinclude -O2 -target aarch64-none-elf -ffreestanding -nostdlib -c $in -o $out
  description = CC ASM KERNEL $out

rule kernel_ld
  command = ld.lld -T kernel/boot/layout_arm64.ld -nostdlib $in -o $out
  description = LD KERNEL $out

rule user_cc
  command = clang -Iinclude -O2 -std=c23 -fno-pic -target aarch64-none-elf -ffreestanding -nostdlib -Wall -Wextra -c $in -o $out
  description = CC USER $out

rule user_ld
  command = ld.lld -T shell/layout_arm64.ld -nostdlib $in -o $out
  description = LD USER $out

rule kernel_incbin
  command = clang -I. -Iinclude -O2 -target aarch64-none-elf -c $in -o $out
  description = CC INCBIN $out

build libc/errno/errno.o: user_cc libc/errno/errno.c
build libc/string/memcpy_user.o: user_cc libc/string/memcpy.c
build libc/string/memset_user.o: user_cc libc/string/memset.c
build libc/string/strncmp_user.o: user_cc libc/string/strncmp.c
build libc/unistd/read.o: user_cc libc/unistd/read.c
build libc/unistd/syscall_arm64.o: user_cc libc/unistd/syscall_arm64.c
build libc/unistd/write.o: user_cc libc/unistd/write.c

build shell/shell.o: user_cc shell/shell.c
build shell.elf: user_ld $
    libc/errno/errno.o $
    libc/string/memcpy_user.o $
    libc/string/memset_user.o $
    libc/string/strncmp_user.o $
    libc/unistd/read.o $
    libc/unistd/syscall_arm64.o $
    libc/unistd/write.o $
    shell/shell.o

build kernel/boot/boot_arm64.o: kernel_asm kernel/boot/boot_arm64.S
build kernel/boot/boot.o: kernel_cc kernel/boot/boot.c

build kernel/clock/clock_arm64.o: kernel_cc kernel/clock/clock_arm64.c

build kernel/core/panic.o: kernel_cc kernel/core/panic.c
build kernel/core/printk.o: kernel_cc kernel/core/printk.c

build kernel/drivers/gicv2_arm64.o: kernel_cc kernel/drivers/gicv2_arm64.c
build kernel/drivers/pl011_arm64.o: kernel_cc kernel/drivers/pl011_arm64.c

build kernel/exec/elf64.o: kernel_cc kernel/exec/elf64.c
build kernel/exec/load.o: kernel_cc kernel/exec/load.c

build kernel/init/initrd.o: kernel_cc kernel/init/initrd.c
build kernel/init/shell.o: kernel_incbin kernel/init/shell.S | shell.elf
build kernel/init/switch.o: kernel_cc kernel/init/switch.c

build kernel/mm/vm_arm64.o: kernel_cc kernel/mm/vm_arm64.c
build kernel/mm/page.o: kernel_cc kernel/mm/page.c
build kernel/mm/vm.o: kernel_cc kernel/mm/vm.c

build kernel/sched/sched.o: kernel_cc kernel/sched/sched.c
build kernel/sched/switch_arm64.o: kernel_asm kernel/sched/switch_arm64.S

build kernel/syscall/io.o: kernel_cc kernel/syscall/io.c
build kernel/syscall/read.o: kernel_cc kernel/syscall/read.c
build kernel/syscall/syscall.o: kernel_cc kernel/syscall/syscall.c
build kernel/syscall/write.o: kernel_cc kernel/syscall/write.c

build kernel/trap/handle_arm64.o: kernel_asm kernel/trap/handle_arm64.S
build kernel/trap/trap_arm64.o: kernel_cc kernel/trap/trap_arm64.c
build kernel/trap/vector_arm64.o: kernel_asm kernel/trap/vector_arm64.S

build kernel/tty/uart_arm64.o: kernel_cc kernel/tty/uart_arm64.c

build libc/string/memcmp_kernel.o: kernel_cc libc/string/memcmp.c
build libc/string/memcpy_kernel.o: kernel_cc libc/string/memcpy.c
build libc/string/memset_kernel.o: kernel_cc libc/string/memset.c
build libc/string/strncmp_kernel.o: kernel_cc libc/string/strncmp.c

build kernel.elf: kernel_ld $
  kernel/boot/boot_arm64.o $
  kernel/boot/boot.o $
  kernel/clock/clock_arm64.o $
  kernel/core/panic.o $
  kernel/core/printk.o $
  kernel/drivers/gicv2_arm64.o $
  kernel/drivers/pl011_arm64.o $
  kernel/exec/elf64.o $
  kernel/exec/load.o $
  kernel/init/initrd.o $
  kernel/init/shell.o $
  kernel/init/switch.o $
  kernel/mm/page.o $
  kernel/mm/vm.o $
  kernel/mm/vm_arm64.o $
  kernel/sched/sched.o $
  kernel/sched/switch_arm64.o $
  kernel/syscall/io.o $
  kernel/syscall/read.o $
  kernel/syscall/syscall.o $
  kernel/syscall/write.o $
  kernel/trap/handle_arm64.o $
  kernel/trap/trap_arm64.o $
  kernel/trap/vector_arm64.o $
  kernel/tty/uart_arm64.o $
  libc/string/memcmp_kernel.o $
  libc/string/memcpy_kernel.o $
  libc/string/memset_kernel.o $
  libc/string/strncmp_kernel.o
