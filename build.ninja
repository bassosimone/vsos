# File: build.ninja
# SPDX-License-Identifier: MIT
# Purpose: Build the kernel

rule cc
  command = clang -I. -O2 -std=c23 -target aarch64-none-elf -ffreestanding -nostdlib -Wall -Wextra -c $in -o $out
  description = CC $out

rule cc_asm
  command = clang -I. -O2 -std=c23 -target aarch64-none-elf -ffreestanding -nostdlib -Wall -Wextra -c $in -o $out
  description = CC ASM $out

rule link
  command = ld.lld -T kernel/boot/layout_arm64.ld -nostdlib $in -o $out
  description = LD $out

build kernel/boot/boot_arm64.o: cc kernel/boot/boot_arm64.c
build kernel/boot/irq_arm64.o: cc kernel/boot/irq_arm64.c
build kernel/boot/irq_vector_arm64.o: cc_asm kernel/boot/irq_vector_arm64.S

build kernel/core/panic.o: cc kernel/core/panic.c
build kernel/core/printk.o: cc kernel/core/printk.c
build kernel/core/panic_arm64.o: cc kernel/core/panic_arm64.c

build kernel/mm/vmap_arm64.o: cc kernel/mm/vmap_arm64.c
build kernel/mm/vmap.o: cc kernel/mm/vmap.c
build kernel/mm/palloc.o: cc kernel/mm/palloc.c

build kernel/sched/clock_arm64.o: cc kernel/sched/clock_arm64.c
build kernel/sched/switch_arm64.o: cc_asm kernel/sched/switch_arm64.S
build kernel/sched/thread.o: cc kernel/sched/thread.c
build kernel/sched/thread_arm64.o: cc kernel/sched/thread_arm64.c

build kernel/sys/syscall_arm64.o: cc kernel/sys/syscall_arm64.c

build kernel/tty/uart.o: cc kernel/tty/uart.c
build kernel/tty/uart_arm64.o: cc kernel/tty/uart_arm64.c

build libc/string/memset.o: cc libc/string/memset.c
build libc/string/strncmp.o: cc libc/string/strncmp.c

build kernel.elf: link kernel/boot/boot_arm64.o kernel/boot/irq_arm64.o kernel/boot/irq_vector_arm64.o kernel/core/panic.o kernel/core/printk.o kernel/core/panic_arm64.o kernel/mm/vmap_arm64.o kernel/mm/vmap.o kernel/mm/palloc.o kernel/sched/clock_arm64.o kernel/sched/switch_arm64.o kernel/sched/thread.o kernel/sched/thread_arm64.o kernel/sys/syscall_arm64.o kernel/tty/uart.o kernel/tty/uart_arm64.o libc/string/memset.o libc/string/strncmp.o
